MAIN_STATES -> MAIN_STATES MAIN_STATES | STATEMENT
MAIN_BLOCK -> CURLY_OPEN MAIN_STATES CURLY_CLOSE
EXPRESSION -> PRIMITIVE_EXPR | PARENTHESES_OPEN EXPRESSION PARENTHESES_CLOSE | EXPRESSION OPERATORS EXPRESSION | WORD PERIOD WORD | WORD PERIOD EXPRESSION | WORD UNARY_OPERATORS
STATEMENT -> DECLARATION | INITIALIZATION | EXPRESSION | FUNC_STATES | WHILE_STATES | FOR_STATES | IF_STATES | SWITCH_STATES | THROW_STATES | TRY_STATES
INDEXED_VAR -> WORD SQUARE_OPEN NUM SQUARE_CLOSE | WORD SQUARE_OPEN STRING SQUARE_CLOSE | ARRAY_EXPR SQUARE_OPEN NUM SQUARE_CLOSE
IN_STATES -> WORD IN WORD | WORD IN COLLECTION_EXPR 
PRIMITIVE_EXPR -> BOOLEAN_EXPR | FUNC_EXPR | WORD | NUM | MINUS NUM | FLOAT | MINUS FLOAT | NOT PRIMITIVE_EXPR | COLLECTION_EXPR | NULL 

// Operators
OPERATORS -> ARITHMETIC | LOGICAL | COMPARISON
UNARY_OPERATORS -> INCREMENT | DECREMENT
ARITHMETIC -> PLUS | MINUS | MULTIPLY | DIVIDE | MODULO | POWER
NOT -> EXCLAMATION
COMPARISON -> GREATER_THAN | LESS_THAN | GREATER_THAN EQ | LESS_THAN EQ | EQ EQ | EQ EQ EQ | EXCLAMATION EQ
ASSIGNMENT -> EQ | PLUS EQ | MINUS EQ | MULTIPLY EQ | DIVIDE EQ | MODULO EQ | POWER EQ
POWER -> MULTIPLY MULTIPLY

// NUM Types
FLOAT -> NUM PERIOD NUM
NUMBER_TYPES -> NUM | MINUS NUM | FLOAT | MINUS FLOAT

// Array Declaration + States
ARRAY_EXPR -> SQUARE_OPEN ARRAY_ELEMENTS SQUARE_CLOSE | SQUARE_OPEN SQUARE_CLOSE
ARRAY_ELEMENTS -> COLLECTION_EXPR | EXPRESSION | ARRAY_ELEMENTS COMMA

// JSObject Declaration + States
OBJECT_EXPR -> CURLY_OPEN OBJECT_ELEMENTS CURLY_CLOSE | CURLY_OPEN CURLY_CLOSE
OBJECT_ELEMENTS -> STRING COLON EXPRESSION | WORD COLON EXPRESSION | NUM COLON EXPRESSION | OBJECT_ELEMENTS COMMA OBJECT_ELEMENTS
OBJECT_DEL -> DELETE DOT_OBJ
DOT_OBJ -> EXPRESSION PERIOD EXPRESSION | DOT_OBJ PERIOD EXPRESSION

// Data Types Declaration
STRING -> SINGLE_QUOTE LONG_WORD SINGLE_QUOTE | DOUBLE_QUOTE LONG_WORD DOUBLE_QUOTE | SINGLE_QUOTE SINGLE_QUOTE | DOUBLE_QUOTE DOUBLE_QUOTE
LONG_WORD -> WORD | WORD LONG_WORD
INITIALIZATION -> WORD ASSIGNMENT EXPRESSION | INDEXED_VAR ASSIGNMENT EXPRESSION
DECLARATION -> LET INITIALIZATION | VAR INITIALIZATION | CONST INITIALIZATION
BOOLEAN_EXPR -> BOOLEAN | IN_STATES | CONDITION
COLLECTION_EXPR -> ARRAY_EXPR | STRING | OBJECT_EXPR

// Conditional Algorithm + States
CONDITION -> PARENTHESES_OPEN CONDITION PARENTHESES_CLOSE | CONDITION LOGICAL CONDITION | CONDITION COMPARISON CONDITION | EXPRESSION
IF_STATES -> IF_ALGO | IF_ALGO ELSE_STATES
IF_ALGO -> IF CONDITION MAIN_BLOCK | IF CONDITION STATEMENT
ELSE_STATES -> ELSE MAIN_BLOCK | ELSE IF_STATES
SWITCH_STATES -> SWITCH CONDITION CURLY_OPEN SWITCH_ALGO CURLY_CLOSE
SWITCH_ALGO -> CASE_STATES
CASE_STATES -> CASE EXPRESSION COLON CASE_ALGO | CASE EXPRESSION COLON CASE_ALGO CASE_STATES | CASE EXPRESSION COLON CASE_ALGO DEFAULT_STATES
CASEWD_STATES -> CASE EXPRESSION COLON CASE_ALGO | CASE EXPRESSION COLON CASE_ALGO CASEWD_STATES
CASE_ALGO -> CASE_ALGO CASE_ALGO | MAIN_STATES | BREAK | CASE
DEFAULT_STATES -> DEFAULT COLON CASE_ALGO CASEWD_STATES


// For and While States + Algorithm
WHILE_STATES -> WHILE CONDITION CURLY_OPEN LOOP_ALGO CURLY_CLOSE | WHILE CONDITION LOOP_ALGO
FOR_STATES -> FOR FOR_CONDITION CURLY_OPEN LOOP_ALGO CURLY_CLOSE | FOR FOR_CONDITION LOOP_ALGO | FOR FOR_EACH_CONDITION LOOP_ALGO | FOR FOR_EACH_CONDITION CURLY_OPEN LOOP_ALGO CURLY_CLOSE
FOR_CONDITION -> PARENTHESES_OPEN STATEMENT SEMICOLON CONDITION SEMICOLON STATEMENT PARENTHESES_CLOSE
FOR_EACH_CONDITION -> PARENTHESES_OPEN WORD OF COLLECTION_EXPR PARENTHESES_CLOSE
LOOP_ALGO -> LOOP_ALGO LOOP_ALGO | MAIN_STATES | BREAK | CONTINUE

// Function Definition + States
FUNC_STATES -> FUNCTION WORD PARAMETER_STATES CURLY_OPEN FUNC_ALGO CURLY_CLOSE
FUNC_ALGO -> FUNC_ALGO FUNC_ALGO | MAIN_STATES | RETURN_STATES
FUNC_EXPR -> WORD ARGUMENT_STATES
RETURN_STATES -> RETURN EXPRESSION | RETURN
ARGUMENT_STATES -> PARENTHESES_OPEN ARGUMENT PARENTHESES_CLOSE | PARENTHESES_OPEN PARENTHESES_CLOSE
ARGUMENT -> ARGUMENT COMMA ARGUMENT | EXPRESSION
PARAMETER_STATES -> PARENTHESES_OPEN PARAMETER PARENTHESES_CLOSE | PARENTHESES_OPEN PARENTHESES_CLOSE
PARAMETER -> PARAMETER COMMA PARAMETER | WORD | WORD EQ EXPRESSION

// Error Handling
TRY_STATES -> TRY_ALGO | TRY_ALGO CATCH_ALGO | TRY_ALGO FINALLY_ALGO | TRY_ALGO CATCH_ALGO FINALLY_ALGO
TRY_ALGO -> TRY MAIN_BLOCK
CATCH_ALGO -> CATCH PARENTHESES_OPEN WORD PARENTHESES_CLOSE MAIN_BLOCK | CATCH MAIN_BLOCK
FINALLY_ALGO -> FINALLY MAIN_BLOCK
THROW_STATES -> THROW EXPRESSION

// Terminal and Non-terminal statements + symbols
PLUS -> +
INCREMENT -> ++
MINUS -> -
DECREMENT -> --
MULTIPLY -> *
DIVIDE -> /
MODULO -> %
DELETE -> delete
BOOLEAN -> true | false
LOGICAL -> && | ||
NULL -> null

CONSOLE -> console
LOG -> log

IF -> if
ELSE -> else
SWITCH -> switch
CASE -> case
DEFAULT -> default
BREAK -> break
CONTINUE -> continue
TRY -> try
CATCH -> catch
FINALLY -> finally
THROW -> throw
WHILE -> while
FOR -> for
WORD -> word
NUM -> num
IN -> in
OF -> of

VAR -> var
LET -> let
CONST -> const
FUNCTION -> function
REQUIRE -> require
RETURN -> return

COLON -> :
SEMICOLON -> ;
PERIOD -> .
COMMA -> ,
SQUARE_OPEN -> [
SQUARE_CLOSE -> ]
PARENTHESES_OPEN -> (
PARENTHESES_CLOSE -> )
CURLY_OPEN -> {
CURLY_CLOSE -> }
EQ -> =
GREATER_THAN -> >
LESS_THAN -> <
EXCLAMATION -> !
SINGLE_COMMENTS -> //
MULTI_COMMENTS_OPEN -> /*
MULTI_COMMENTS_CLOSE -> */
SINGLE_QUOTE -> '
DOUBLE_QUOTE -> "
